{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/idplay/src/app/api/search/route.ts"],"sourcesContent":["// app/api/search/route.ts (Content from your provided route.ts that handles 'q')\r\nimport { NextResponse } from \"next/server\";\r\n\r\nexport async function GET(request: Request) {\r\n  const { searchParams } = new URL(request.url);\r\n  const query = searchParams.get(\"q\");\r\n\r\n  if (!query) {\r\n    return NextResponse.json(\r\n      { error: \"Search query is required\" },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  try {\r\n    const nominatimUrl = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\r\n      query\r\n    )}&limit=1`; // limit=1 to get the most relevant result\r\n    const response = await fetch(nominatimUrl, {\r\n      headers: {\r\n        \"User-Agent\": \"IDPlay-Coverage-Checker/1.0 (contact@example.com)\", // IMPORTANT: Replace with your actual application name and contact\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Nominatim API failed: ${response.status} ${errorText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n\r\n    if (data.length === 0) {\r\n      return NextResponse.json(\r\n        { error: \"Location not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const { lat, lon, display_name } = data[0];\r\n    return NextResponse.json({\r\n      lat: parseFloat(lat),\r\n      lon: parseFloat(lon),\r\n      name: display_name,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching from Nominatim:\", error);\r\n    return NextResponse.json(\r\n      {\r\n        error: `Failed to get geocoding data: ${\r\n          error instanceof Error ? error.message : String(error)\r\n        }`,\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,iFAAiF;;;;AACjF;;AAEO,eAAe,IAAI,OAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,QAAQ,aAAa,GAAG,CAAC;IAE/B,IAAI,CAAC,OAAO;QACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI;QACF,MAAM,eAAe,CAAC,yDAAyD,EAAE,mBAC/E,OACA,QAAQ,CAAC,EAAE,0CAA0C;QACvD,MAAM,WAAW,MAAM,MAAM,cAAc;YACzC,SAAS;gBACP,cAAc;YAChB;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,MAAM,IAAI,MAAM,CAAC,sBAAsB,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE,WAAW;QACzE;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,KAAK,MAAM,KAAK,GAAG;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqB,GAC9B;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,EAAE;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,KAAK,WAAW;YAChB,KAAK,WAAW;YAChB,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO,CAAC,8BAA8B,EACpC,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO,QAChD;QACJ,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}