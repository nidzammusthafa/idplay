{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/idplay/src/app/api/route/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const startLon = searchParams.get(\"startLon\");\n  const startLat = searchParams.get(\"startLat\");\n  const endLon = searchParams.get(\"endLon\");\n  const endLat = searchParams.get(\"endLat\");\n\n  if (!startLon || !startLat || !endLon || !endLat) {\n    return NextResponse.json(\n      { error: \"Missing start or end coordinates\" },\n      { status: 400 }\n    );\n  }\n\n  const osrmUrl = `https://router.project-osrm.org/route/v1/driving/${startLon},${startLat};${endLon},${endLat}?overview=false`;\n\n  try {\n    const response = await fetch(osrmUrl, {\n      headers: {\n        \"User-Agent\": \"IDPlay-Coverage-Checker/1.0\",\n      },\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`OSRM API failed: ${response.status} ${errorText}`);\n    }\n\n    const data = await response.json();\n\n    if (data.code !== \"Ok\" || !data.routes || data.routes.length === 0) {\n        return NextResponse.json({ distance: null, error: \"No route found\" });\n    }\n\n    // Return just the distance from the first route\n    return NextResponse.json({ distance: data.routes[0].distance });\n\n  } catch (error) {\n    console.error(\"Error fetching from OSRM:\", error);\n    return NextResponse.json(\n      {\n        error: `Failed to get route data: ${\n          error instanceof Error ? error.message : String(error)\n        }`,\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,IAAI,OAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,WAAW,aAAa,GAAG,CAAC;IAClC,MAAM,WAAW,aAAa,GAAG,CAAC;IAClC,MAAM,SAAS,aAAa,GAAG,CAAC;IAChC,MAAM,SAAS,aAAa,GAAG,CAAC;IAEhC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,UAAU,CAAC,QAAQ;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAmC,GAC5C;YAAE,QAAQ;QAAI;IAElB;IAEA,MAAM,UAAU,CAAC,iDAAiD,EAAE,SAAS,CAAC,EAAE,SAAS,CAAC,EAAE,OAAO,CAAC,EAAE,OAAO,eAAe,CAAC;IAE7H,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,SAAS;YACpC,SAAS;gBACP,cAAc;YAChB;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,MAAM,IAAI,MAAM,CAAC,iBAAiB,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE,WAAW;QACpE;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,KAAK,IAAI,KAAK,QAAQ,CAAC,KAAK,MAAM,IAAI,KAAK,MAAM,CAAC,MAAM,KAAK,GAAG;YAChE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,UAAU;gBAAM,OAAO;YAAiB;QACvE;QAEA,gDAAgD;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,UAAU,KAAK,MAAM,CAAC,EAAE,CAAC,QAAQ;QAAC;IAE/D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO,CAAC,0BAA0B,EAChC,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO,QAChD;QACJ,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}