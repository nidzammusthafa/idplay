{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///D:/Projects/idplay/src/app/api/geocode/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const lat = searchParams.get(\"lat\");\n  const lon = searchParams.get(\"lon\");\n\n  if (!lat || !lon) {\n    return NextResponse.json(\n      { error: \"Latitude and longitude are required\" },\n      { status: 400 }\n    );\n  }\n\n  try {\n    const nominatimUrl = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lon}&addressdetails=1`;\n    const response = await fetch(nominatimUrl, {\n      headers: {\n        \"User-Agent\": \"IDPlay-Coverage-Checker/1.0 (contact@example.com)\",\n      },\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Nominatim API failed: ${response.status} ${errorText}`);\n    }\n\n    const data = await response.json();\n\n    // Return the full address object and display_name\n    return NextResponse.json({ address: data.address, displayName: data.display_name });\n\n  } catch (error) {\n    console.error(\"Error fetching from Nominatim:\", error);\n    return NextResponse.json(\n      {\n        error: `Failed to get address data: ${\n          error instanceof Error ? error.message : String(error)\n        }`,\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,IAAI,OAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,MAAM,aAAa,GAAG,CAAC;IAC7B,MAAM,MAAM,aAAa,GAAG,CAAC;IAE7B,IAAI,CAAC,OAAO,CAAC,KAAK;QAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAsC,GAC/C;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI;QACF,MAAM,eAAe,CAAC,8DAA8D,EAAE,IAAI,KAAK,EAAE,IAAI,iBAAiB,CAAC;QACvH,MAAM,WAAW,MAAM,MAAM,cAAc;YACzC,SAAS;gBACP,cAAc;YAChB;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,MAAM,IAAI,MAAM,CAAC,sBAAsB,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE,WAAW;QACzE;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,kDAAkD;QAClD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS,KAAK,OAAO;YAAE,aAAa,KAAK,YAAY;QAAC;IAEnF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO,CAAC,4BAA4B,EAClC,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO,QAChD;QACJ,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}